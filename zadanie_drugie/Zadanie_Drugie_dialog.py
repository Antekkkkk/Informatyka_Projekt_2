# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Zadanie2Dialog
                                 A QGIS plugin
 Liczenie przewyższeń oraz pól
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-06-11
        git sha              : $Format:%H$
        copyright            : (C) 2023 by AKRS
        email                : r.szlen5320@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsGeometry

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Zadanie_Drugie_dialog_base.ui'))


class Zadanie2Dialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(Zadanie2Dialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.licz_przew.clicked.connect(self.count_selected_features)
        self.licz_przew.clicked.connect(self.przewyzszenie)
        self.licz_pole.clicked.connect(self.pole)

    def count_selected_features(self):
        number_of_selected_features = len(self.mMapLayerComboBox.currentLayer().selectedFeatures())
        # self.wynik_pola.setText(str(number_of_selected_features))

    def przewyzszenie(self):
        warstwa = self.mMapLayerComboBox.currentLayer()
        # number_of_selected_features = len(self.mMapLayerComboBox.currentLayer().selectedFeatures())
        wspolrzedne = warstwa.selectedFeatures()
        Z = []
        lista_nazwa = []
        for kolumna in wspolrzedne:
            z = kolumna["zcoord"]
            Z.append(z)
            nazwa = kolumna["EntityHandle"]
            lista_nazwa.append(nazwa)
        if len(Z) > 2:
            wybrane = len(Z)
            self.okno_wynikowe.setText(f'Należy wybrać dokładnie 2 punkty. Wybrano {wybrane}.')
        elif len(Z) < 2:
            wybrane = len(Z)
            self.okno_wynikowe.setText(f'Należy wybrać dokładnie 2 punkty. Wybrano {wybrane}.')
        else:
            wynik = Z[1] - Z[0]
            pkt1 = lista_nazwa[0]
            pkt2 = lista_nazwa[1]
            self.okno_wynikowe.setText(
                f'Różnica wysokości między punktami o numerach {pkt1} a {pkt2}  wynosi {wynik} [m]')

        # except:
        #     for kolumna in wspolrzedne:
        #         z = kolumna["wysokość"]
        #         Z.append(z)
        #     if len(Z) > 2:
        #         self.wynik_wysokosci.setText('Za dużo punktów')
        #     elif len(Z) < 2:
        #         self.wynik_wysokosci.setText('Za mało punktow')
        #     else:
        #         wynik = Z[1]-Z[0]
        #         self.wynik_wysokosci.setText(str(wynik))

    def pole(self):
        # warstwa = self.mMapLayerComboBox.currentLayer()
        # wspolrzedne  = warstwa.selectedFeatures()
        # self.okno_wynikowe.setText('')
        # Z = []
        # X = []
        # Y = []
        # for kolumna in wspolrzedne:
        #         z = kolumna["zcoord"]
        #         Z.append(z)
        # dl = len(Z)
        # if dl >= 3:
        #     punkty = []
        #     for pkt in wspolrzedne:
        #         punkty.append(pkt.geometry().asPoint())
        #     poligon = QgsGeometry.fromPolygonXY([punkty])
        #     pole = poligon.area()
        #     self.okno_wynikowe.setText(f'Pole pomiędzy wybranymi {dl} punktami = {pole} m^2')
        # else:
        #     self.okno_wynikowe.setText('Należy wybrać 3 lub więcej punktów')
        warstwa = self.mMapLayerComboBox.currentLayer()
        wspolrzedne = warstwa.selectedFeatures()
        Z = []
        X = []
        Y = []
        lista_nazwa = []
        for kolumna in wspolrzedne:
            x = float(kolumna["xcoord"])
            X.append(x)
            y = float(kolumna["xcoord"])
            Y.append(y)
            z = float(kolumna["zcoord"])
            Z.append(z)
            nazwa = kolumna["EntityHandle"]
            lista_nazwa.append(nazwa)
        dl = len(Z)
        Dwapola = 0
        if dl >= 3:
            for i in range(1, dl - 1):
                skladnik = (X[i] + X[i - 1]) * (Y[i] - Y[i - 1])
                Dwapola = Dwapola + skladnik
            pole = abs(Dwapola / 2)
            self.okno_wynikowe.setText(f'Pole pomiędzy wybranymi {dl} punktami = {pole} m^2')
        else:
            self.okno_wynikowe.setText('Należy wybrać 3 lub więcej punktów')






